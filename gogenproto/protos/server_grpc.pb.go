// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/server.proto

package nightswatch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NightsWatchService_Register_FullMethodName       = "/nightswatch.server.NightsWatchService/Register"
	NightsWatchService_Login_FullMethodName          = "/nightswatch.server.NightsWatchService/Login"
	NightsWatchService_SendDeviceData_FullMethodName = "/nightswatch.server.NightsWatchService/SendDeviceData"
	NightsWatchService_LatestData_FullMethodName     = "/nightswatch.server.NightsWatchService/LatestData"
)

// NightsWatchServiceClient is the client API for NightsWatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NightsWatchServiceClient interface {
	// Service methods will be defined here
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendDeviceData(ctx context.Context, in *DeviceDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LatestData(ctx context.Context, in *LatestDataRequest, opts ...grpc.CallOption) (*LatestDataResponse, error)
}

type nightsWatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNightsWatchServiceClient(cc grpc.ClientConnInterface) NightsWatchServiceClient {
	return &nightsWatchServiceClient{cc}
}

func (c *nightsWatchServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NightsWatchService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightsWatchServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NightsWatchService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightsWatchServiceClient) SendDeviceData(ctx context.Context, in *DeviceDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NightsWatchService_SendDeviceData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightsWatchServiceClient) LatestData(ctx context.Context, in *LatestDataRequest, opts ...grpc.CallOption) (*LatestDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LatestDataResponse)
	err := c.cc.Invoke(ctx, NightsWatchService_LatestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NightsWatchServiceServer is the server API for NightsWatchService service.
// All implementations must embed UnimplementedNightsWatchServiceServer
// for forward compatibility.
type NightsWatchServiceServer interface {
	// Service methods will be defined here
	Register(context.Context, *RegisterRequest) (*emptypb.Empty, error)
	Login(context.Context, *LoginRequest) (*emptypb.Empty, error)
	SendDeviceData(context.Context, *DeviceDataRequest) (*emptypb.Empty, error)
	LatestData(context.Context, *LatestDataRequest) (*LatestDataResponse, error)
	mustEmbedUnimplementedNightsWatchServiceServer()
}

// UnimplementedNightsWatchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNightsWatchServiceServer struct{}

func (UnimplementedNightsWatchServiceServer) Register(context.Context, *RegisterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNightsWatchServiceServer) Login(context.Context, *LoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedNightsWatchServiceServer) SendDeviceData(context.Context, *DeviceDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeviceData not implemented")
}
func (UnimplementedNightsWatchServiceServer) LatestData(context.Context, *LatestDataRequest) (*LatestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestData not implemented")
}
func (UnimplementedNightsWatchServiceServer) mustEmbedUnimplementedNightsWatchServiceServer() {}
func (UnimplementedNightsWatchServiceServer) testEmbeddedByValue()                            {}

// UnsafeNightsWatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NightsWatchServiceServer will
// result in compilation errors.
type UnsafeNightsWatchServiceServer interface {
	mustEmbedUnimplementedNightsWatchServiceServer()
}

func RegisterNightsWatchServiceServer(s grpc.ServiceRegistrar, srv NightsWatchServiceServer) {
	// If the following call pancis, it indicates UnimplementedNightsWatchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NightsWatchService_ServiceDesc, srv)
}

func _NightsWatchService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightsWatchServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NightsWatchService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightsWatchServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NightsWatchService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightsWatchServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NightsWatchService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightsWatchServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NightsWatchService_SendDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightsWatchServiceServer).SendDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NightsWatchService_SendDeviceData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightsWatchServiceServer).SendDeviceData(ctx, req.(*DeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NightsWatchService_LatestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightsWatchServiceServer).LatestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NightsWatchService_LatestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightsWatchServiceServer).LatestData(ctx, req.(*LatestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NightsWatchService_ServiceDesc is the grpc.ServiceDesc for NightsWatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NightsWatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nightswatch.server.NightsWatchService",
	HandlerType: (*NightsWatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _NightsWatchService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _NightsWatchService_Login_Handler,
		},
		{
			MethodName: "SendDeviceData",
			Handler:    _NightsWatchService_SendDeviceData_Handler,
		},
		{
			MethodName: "LatestData",
			Handler:    _NightsWatchService_LatestData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/server.proto",
}
